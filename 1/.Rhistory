thetas <- seq(0,1,.01)
unnorm.like <- function(theta){
theta^y * (1-theta)^(n-y)
}
unnorm.like <- function(theta){
if((theta > 0) & (theta < 1))
theta^y * (1-theta)^(n-y)
else
0
}
# function that will evaluate prior
prior <- function(theta){
if((theta > 0) & (theta < 1))
1
else
0
}
priorEvals <- prior(thetas)
# make a plot
thetas <- seq(0,1,.01)
priorEvals <- prior(thetas)
n <- 10
y <- 4
# function that will evaluate unnormalized likelihood
unnorm.like <- function(theta){
if((theta > 0) && (theta < 1))
theta^y * (1-theta)^(n-y)
else
0
}
# function that will evaluate prior
prior <- function(theta){
if((theta > 0) && (theta < 1))
1
else
0
}
# make a plot
thetas <- seq(0,1,.01)
priorEvals <- prior(thetas)
unnormlikes <- unnorm.like(thetas)
# make a plot
thetas <- seq(0,1,.01)
priorEvals <- prior(thetas)
unnormlikes <- unnorm.like(thetas)
plot(thetas, priorEvals)
lines(thetas, unnormlikes)
# make a plot
thetas <- seq(0,1,.01)
priorEvals <- prior(thetas)
plot(thetas, priorEvals)
priorEvals
# function that will evaluate unnormalized likelihood
unnorm.like <- function(theta){
if((theta > 0) & (theta < 1))
theta^y * (1-theta)^(n-y)
else
0
}
# function that will evaluate prior
prior <- function(theta){
if((theta > 0) & (theta < 1))
1
else
0
}
# make a plot
thetas <- seq(0,1,.01)
priorEvals <- prior(thetas)
# function that will evaluate unnormalized likelihood
unnorm.like <- function(theta){
theta^y * (1-theta)^(n-y)
}
# function that will evaluate prior
prior <- function(theta){
1
}
# make a plot
thetas <- seq(0,1,.01)
priorEvals <- prior(thetas)
unnormlikes <- unnorm.like(thetas)
plot(thetas, priorEvals)
prior(thetas)
prior(.5)
prior(thetas)
# function that will evaluate unnormalized likelihood
unnorm.like <- function(theta){
theta^y * (1-theta)^(n-y)
}
theta^y * (1-theta)^(n-y)
thetas^y * (1-thetas)^(n-y)
priorEvals <- rep(1, length(thetas))
unnormlikes <- thetas^y * (1-thetas)^(n-y)
# make a plot
thetas <- seq(0,1,.01)
priorEvals <- rep(1, length(thetas))
unnormlikes <- thetas^y * (1-thetas)^(n-y)
plot(thetas, priorEvals)
plot(thetas, priorEvals, type= "l")
lines(thetas, unnormlikes)
unnormlikes
plot(thetas, unnormlikes, type= "l")
lines(thetas, priorEvals)
unnormlikes <- 1000* thetas^y * (1-thetas)^(n-y)
plot(thetas, unnormlikes, type= "l")
lines(thetas, priorEvals)
unnormlikes <- choose(n,y) thetas^y * (1-thetas)^(n-y)
unnormlikes <- choose(n,y)* thetas^y * (1-thetas)^(n-y)
plot(thetas, unnormlikes, type= "l")
lines(thetas, priorEvals)
# make a plot
thetas <- seq(0,1,.01)
priorEvals <- rep(1, length(thetas))
likes <- choose(n,y)* thetas^y * (1-thetas)^(n-y)
plot(thetas, likes, type= "l")
lines(thetas, priorEvals)
plot(thetas, priorEvals, type= "l")
lines(thetas, likes)
likes
unnorm.likes <- 100*choose(n,y)* thetas^y * (1-thetas)^(n-y)
plot(thetas, priorEvals, type= "l")
lines(thetas, unnorm.likes)
unnorm.likes <- 50*choose(n,y)* thetas^y * (1-thetas)^(n-y)
plot(thetas, priorEvals, type= "l")
lines(thetas, unnorm.likes)
unnorm.likes <- .5*choose(n,y)* thetas^y * (1-thetas)^(n-y)
plot(thetas, priorEvals, type= "l")
lines(thetas, unnorm.likes)
unnorm.likes <- 5*choose(n,y)* thetas^y * (1-thetas)^(n-y)
plot(thetas, priorEvals, type= "l")
lines(thetas, unnorm.likes)
plot(thetas, unnorm.likes)
unnorm.likes <- 2*choose(n,y)* thetas^y * (1-thetas)^(n-y)
plot(thetas, priorEvals, type= "l")
lines(thetas, unnorm.likes)
unnorm.likes <- 20*choose(n,y)* thetas^y * (1-thetas)^(n-y)
plot(thetas, priorEvals, type= "l")
lines(thetas, unnorm.likes)
unnorm.likes <- 3*choose(n,y)* thetas^y * (1-thetas)^(n-y)
plot(thetas, priorEvals, type= "l")
lines(thetas, unnorm.likes)
plot(thetas, priorEvals, type= "l", ylim = c(0,1.2))
lines(thetas, unnorm.likes)
unnorm.likes <- 3*choose(n,y)* thetas^y * (1-thetas)^(n-y)
plot(thetas, priorEvals, type= "l", ylim = c(0,1.2))
lines(thetas, unnorm.likes)
unnorm.likes <- choose(n,y)* thetas^y * (1-thetas)^(n-y)
plot(thetas, priorEvals, type= "l", ylim = c(0,1.2))
lines(thetas, unnorm.likes)
# make a plot
thetas <- seq(0,1,.01)
priorEvals <- rep(1, length(thetas))
likes <- choose(n,y)* thetas^y * (1-thetas)^(n-y)
plot(thetas, priorEvals, type= "l", ylim = c(0,1.2))
lines(thetas, likes)
# variables and data
n <- 30
y <- 12
# make a plot
thetas <- seq(0,1,.01)
priorEvals <- rep(1, length(thetas))
likes <- choose(n,y)* thetas^y * (1-thetas)^(n-y)
plot(thetas, priorEvals, type= "l", ylim = c(0,1.2))
lines(thetas, likes)
# variables and data
n <- 10
y <- 4
# make a plot
thetas <- seq(0,1,.01)
priorEvals <- rep(1, length(thetas))
likes <- choose(n,y)* thetas^y * (1-thetas)^(n-y)
plot(thetas, priorEvals, type= "l", ylim = c(0,1.2))
lines(thetas, likes)
plot(thetas, priorEvals,
type= "l",
ylim = c(0,1.2),
ylab = "", xlab= "theta")
lines(thetas, likes)
plot(thetas, priorEvals,
type= "l",
ylim = c(0,1.2),
ylab = "",
xlab= "theta",
col = "red")
lines(thetas, likes, col = "blue")
legend("topleft", col = c("red, blue"))
legend("topleft", legend = c("prior", "likelihood"), col = c("red, blue"))
legend("topleft", legend = c("prior", "likelihood"), col = c("red, blue"), pch = 12)
# make a plot
thetas <- seq(0,1,.01)
priorEvals <- rep(1, length(thetas))
likes <- choose(n,y) * thetas^y * (1-thetas)^(n-y)
plot(thetas, priorEvals,
type= "l",
ylim = c(0,1.2),
ylab = "",
xlab= "theta",
col = "red")
lines(thetas, likes, col = "blue")
posteriors <- dbeta(thetas, shape1 = y+1, shape2 = n-y+1)
lines(thetas, posteriors, col = "green")
plot(thetas, posteriors, col = "green",
type= "l",
ylim = c(0,2),
ylab = "",
xlab= "theta")
lines(thetas, priorEvals, col = "red")
lines(thetas, likes, col = "blue")
plot(thetas, posteriors, col = "green",
type= "l",
ylab = "",
xlab= "theta")
lines(thetas, priorEvals, col = "red")
lines(thetas, likes, col = "blue")
legend("topright", legend = c("post", "prior", "like"))
legend("topright", legend = c("post", "prior", "like"), col = c("green", "red", "blue"))
legend("topright", legend = c("post", "prior", "like"), col = c("green", "red", "blue"), pch = 5)
?qbeta
# find a confidence interval
left <- qbeta(.025, y+1, n-y+1)
right <- qbeta(.975, y+1, n-y+1)
cat("posterior interval", "(", left, ",", right, ")")
?solve.HPD.beta
??solve.HPD.beta
??HPD
