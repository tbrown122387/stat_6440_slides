y <- 2 # fake data
num_trials <- 1000
theta_proposals <- rt(num_trials, 1)
us <- runif(num_trials, min = 0, max = 1)
log_accept_prob <- function(theta){
-.5*(y - theta)^2
}
probs <- exp(log_accept_prob(theta_proposals))
accepts <- ifelse(us < probs, TRUE, FALSE)
hist(theta_proposals[accepts]) # only the accepted draws
?dt
plot(exp(log_accept_prob(seq(-3,3,.01))))
grid <- seq(-3,3,.01)
lines(grid, dnorm(y, mean = grid), col = "black")
grid <- seq(-3,3,.01)
plot(grid, exp(log_accept_prob(grid)), col = "red")
lines(grid, dnorm(y, mean = grid), col = "black")
grid <- seq(2-2,2+2,.01)
plot(grid, exp(log_accept_prob(grid)), col = "red")
lines(grid, dnorm(y, mean = grid), col = "black")
plot(grid, exp(log_accept_prob(grid)), col = "red", type = "l")
lines(grid, dnorm(y, mean = grid), col = "blue")
y <- 2 # fake data
log_unnorm_weight <- function(theta){
# sqrt(2pi) because it will cancel out
-.5*(y - theta)^2
}
getISEstimator <- function(num_samples){
theta_draws <- rt(num_samples , 1)
lunws <- log_unnorm_weight(theta_draws)
norm_weights <- exp(lunws)/sum(exp(lunws))
mean(norm_weights * theta_draws)
}
hist(replicate(30, getISEstimator(100)))
sd(replicate(30, getISEstimator(100)))
getISEstimator <- function(num_samples){
lunws <- log_unnorm_weight(theta_draws)
norm_weights <- exp(lunws)/sum(exp(lunws))
estimator <- mean(norm_weights * theta_draws)
list("estimate" = estimator,
"approx. std. error" = sum( norm_weights*(theta_draws - estimator)^2 )
}
sd(replicate(30, getISEstimator(100)))
getISEstimator <- function(num_samples){
theta_draws <- rt(num_samples , 1)
lunws <- log_unnorm_weight(theta_draws)
norm_weights <- exp(lunws)/sum(exp(lunws))
estimator <- mean(norm_weights * theta_draws)
list("estimate" = estimator,
"approx. std. error" = sum( norm_weights*(theta_draws - estimator)^2) )
}
sd(replicate(30, getISEstimator(100)$estimate))
sd(replicate(100, getISEstimator(10)$estimate))
getISEstimator <- function(num_samples){
theta_draws <- rt(num_samples , 1)
lunws <- log_unnorm_weight(theta_draws)
norm_weights <- exp(lunws)/sum(exp(lunws))
estimator <- mean(norm_weights * theta_draws)
list("estimate" = estimator,
"approx_std_error" = sum( norm_weights*(theta_draws - estimator)^2) )
}
num_samps_per_estimate <- 10
sd(replicate(100, getISEstimator(num_samps_per_estimate)$estimate))
getISEstimator(num_samps_per_estimate)$approx_std_error
getISEstimator <- function(num_samples){
theta_draws <- rt(num_samples , 1)
lunws <- log_unnorm_weight(theta_draws)
norm_weights <- exp(lunws)/sum(exp(lunws))
estimator <- mean(norm_weights * theta_draws)
list("estimate" = estimator,
"approx_var" = sum( norm_weights*(theta_draws - estimator)^2) )
}
num_samps_per_estimate <- 10
sd(replicate(100, getISEstimator(num_samps_per_estimate)$estimate))
sqrt(getISEstimator(num_samps_per_estimate)$approx_var)
sqrt(getISEstimator(num_samps_per_estimate)$approx_var)
sqrt(getISEstimator(num_samps_per_estimate)$approx_var)
sqrt(getISEstimator(num_samps_per_estimate)$approx_var)
sqrt(getISEstimator(num_samps_per_estimate)$approx_var)
sqrt(getISEstimator(num_samps_per_estimate)$approx_var)
sqrt(getISEstimator(num_samps_per_estimate)$approx_var)
getISEstimator <- function(num_samples){
theta_draws <- rt(num_samples , 1)
lunws <- log_unnorm_weight(theta_draws)
norm_weights <- exp(lunws)/sum(exp(lunws))
estimator <- sum(norm_weights * theta_draws)
list("estimate" = estimator,
"approx_var" = sum( norm_weights*(theta_draws - estimator)^2) )
}
num_samps_per_estimate <- 10
sd(replicate(100, getISEstimator(num_samps_per_estimate)$estimate))
sqrt(getISEstimator(num_samps_per_estimate)$approx_var)
sqrt(getISEstimator(num_samps_per_estimate)$approx_var)
sqrt(getISEstimator(num_samps_per_estimate)$approx_var)
sqrt(getISEstimator(num_samps_per_estimate)$approx_var)
sqrt(getISEstimator(num_samps_per_estimate)$approx_var)
sqrt(getISEstimator(num_samps_per_estimate)$approx_var)
sqrt(getISEstimator(num_samps_per_estimate)$approx_var)
sqrt(getISEstimator(num_samps_per_estimate)$approx_var)
sqrt(getISEstimator(num_samps_per_estimate)$approx_var)
sd(replicate(1000, getISEstimator(num_samps_per_estimate)$estimate))
